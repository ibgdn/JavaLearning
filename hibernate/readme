1. 创建数据库和表。
    create database test;

    use test;

    CREATE TABLE product_ (
      id int(11) NOT NULL AUTO_INCREMENT,
      name varchar(30) ,
      price float ,
      PRIMARY KEY (id)
    ) DEFAULT CHARSET=UTF8;

    CREATE USER 'test' IDENTIFIED BY 'test';

    GRANT all privileges ON test.* TO  'test';

2. 创建 hibernate 项目，并导入对应的 *.jar 文件（MySQL 文件不要遗漏）。

3. 创建实体类 hibernate\src\com\hibernate\pojo\Product.java 用于映射数据库中的表product_。

4. 新建一个配置文件 hibernate\src\com\hibernate\pojo\Product.hbm.xml， 用于映射Product类对应数据库中的product_表
   注: 文件名 Product.hbm.xml P一定要大写，要和类保持一致。

5. 在src目录下创建 hibernate\src\hibernate.cfg.xml，配置访问数据库要用到的驱动，url，账号密码等等。

6. 创建一个Product对象，并通过hibernate把这个对象，插入到数据库中。
        hibernate的基本步骤是：
            1. 获取SessionFactory
            2. 通过SessionFactory 获取一个Session
            3. 在Session基础上开启一个事务
            4. 通过调用Session的save方法把对象保存到数据库
            5. 提交事务
            6. 关闭Session
            7. 关闭SessionFactory

7. 基本原理
       应用程序通过Hibernate把 一个 Product对象插入到数据库的product_表中
       hibernate.cfg.xml 配置文件提供链接数据库的基本信息
       账号 密码 驱动 数据库ip 端口
       Product.hbm.xml 提供对象与表的映射关系
       对应哪个表？ 什么属性，对应什么字段

8. 分类
        CREATE TABLE category_ (
          id int(11) NOT NULL AUTO_INCREMENT,
          name varchar(30) ,
          PRIMARY KEY (id)
        ) DEFAULT CHARSET=UTF8;

9. 基础
        TestHibernateProduct.java TestHibernateCategory.java
10. 关系  TestHibernateRelation.java
    多对一
        product_ 添加 cid 字段
        Ⅰ. 如果按照之前的建表语句执行，产品表里会缺少“分类 id”字段，需要执行：alter table product_ add column cid varchar(30);【参考1】
        Ⅱ. 修改表结构后会出现“WARN: GenerationTarget encountered exception accepting command : Error executing DDL via JDBC Statement
                        org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL via JDBC Statement”
            修正方法：hibernate.cfg.xml 文件中修改 <property name="hbm2ddl.auto">update</property> 为 create，重新构建表结构（再次执行），
            然后将“create”改回为“update”即可。【参考2】

    多对一
        Category 添加 Product set 集合

    多对多
        添加 User 实体类及配置文件，Product.java 添加 User set集合。
        CREATE TABLE user_ (
          id int(11) NOT NULL AUTO_INCREMENT,
          name varchar(30) ,
          product varchar(30) ,
          PRIMARY KEY (id)
        ) DEFAULT CHARSET=UTF8;
        注意：如果执行出错：ERROR: Field 'id' doesn't have a default value，
            需要创建 user_product 表（虽然可以自动创建，但是无法按照示例正常执行）。
        CREATE TABLE user_product (
          id int(11) NOT NULL AUTO_INCREMENT,
          uid int(11),
          pid int(11),
          PRIMARY KEY (id)
        ) DEFAULT CHARSET=UTF8;

11. 一些概念   TestHibernateSomethings.java
    事务
        MYSQL 表的类型必须是INNODB才支持事务
        在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务.
        修改表的类型为INNODB的SQL：    alter table product_ ENGINE  = innodb;
        查看表的类型的SQL：    show table status from test;

    关系延迟加载
        修改配置文件 Category.hbm.xml 中 <set name="products" lazy="false"> 改为 <set name="products" lazy="true">，表示通过Category获取产品是延迟加载的。

    级联删除
        Category.hbm.xml 加上 <set name="products" cascade="delete" lazy="false">
    级联修改
        Category.hbm.xml 加上 <set name="products" cascade="save-update" lazy="false">

    一级缓存

    二级缓存
        hibernate.cfg.xml 中增加对二级缓存的配置：
            <property name="hibernate.cache.use_second_level_cache">true</property>
            <property name="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</property>
            （由于版本问题，示例使用hibernate3，本项目使用hibernate5，上一行配置无效，未实现二级缓存）
        在src目录下，创建一个ehcache.xml用于EHCache的缓存配置：
            <ehcache>
                <diskStore path="java.io.tmpdir"/>
                <defaultCache
                    maxElementsInMemory="10000"
                    eternal="false"
                    timeToIdleSeconds="120"
                    timeToLiveSeconds="120"
                    overflowToDisk="true"
                    />
            </ehcache>
        Category.hbm.xml 对于要进行二级缓存的实体类进行配置，增加 <cache usage="read-only" />

    分页

    两种获取方式
        get() load()

    两种 Session 方式

    N+1

    查询总数

    乐观锁
        修改 Product.java 增加version属性
            修改配置文件 Product.hbm.xml <version name="version" column="ver" type="int"></version>
        增加一个version字段，用于版本信息控制。这就是乐观锁的核心机制。
            比如session1获取product1的时候，version=1。 那么session1更新product1的时候，就需要确保version还是1才可以进行更新，并且更新结束后，把version改为2。
        注意： version元素必须紧跟着id后面，否则会出错。
        没有出现示例中的错误：
            ERROR: HHH000346: Error during managed flush [Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1]

        原理：
            1. 假设数据库中产品的价格是10000，version是10
            2. session1,session2分别获取了该对象
            3. 都修改了对象的价格
            4. session1试图保存到数据库，检测version依旧=10，成功保存，并把version修改为11
            5. session2试图保存到数据库，检测version=11，说明该数据已经被其他人动过了。 保存失败，抛出异常

    c3p0
        hibernate.cfg.xml
            <property name="hibernate.connection.provider_class">
                org.hibernate.c3p0.internal.C3P0ConnectionProvider
            </property>
            <property name="hibernate.c3p0.max_size">20</property>
            <property name="hibernate.c3p0.min_size">5</property>
            <property name="hibernate.c3p0.timeout">50000</property>
            <property name="hibernate.c3p0.max_statements">100</property>
            <property name="hibernate.c3p0.idle_test_period">3000</property>
            <!-- 当连接池耗尽并接到获得连接的请求，则新增加连接的数量 -->
            <property name="hibernate.c3p0.acquire_increment">2</property>
            <!-- 是否验证，检查连接 -->
            <property name="hibernate.c3p0.validate">false</property>

        去除二级缓存配置 Category.hbm.xml <!--     <cache usage="read-only" />-->

        无法正常执行：
            Exception in thread "main" java.lang.NoClassDefFoundError: com/mchange/v2/log/MLog

12. 注解  hibernate.cfg.annotation.xml    ProductAnnotation.java
    hibernate里常用注解包括，类注解，属性注解，关系注解。

    注解手册
        类相关注解
            @Entity —— 将一个类声明为一个实体bean(即一个持久化POJO类)
            @Table —— 注解声明了该实体bean映射指定的表（table）,目录（catalog）和schema的名字

        属性相关注解
            @Id —— 注解声明了该实体bean的标识属性（对应表中的主键）。
            @Column —— 注解声明了属性到列的映射。该注解有如下的属性
                name 可选，列名（默认值是属性名）
                unique 可选，是否在该列上设置唯一约束（默认值false）
                nullable 可选，是否设置该列的值可以为空（默认值false）
                insertable 可选，该列是否作为生成的insert语句中的一个列（默认值true）
                updatable 可选，该列是否作为生成的update语句中的一个列（默认值true）
                columnDefinition 可选，为这个特定列覆盖sql ddl片段（这可能导致无法在不同数据库间移植）
                table 可选，定义对应的表（默认为主表）
                length 可选，列长度（默认值255）
                precision 可选，列十进制精度（decimal precision)(默认值0）
                scale 可选，如果列十进制数值范围（decimal scale）可用，在此设置（默认值0）
            @GeneratedValue —— 注解声明了主键的生成策略。该注解有如下属性
                strategy 指定生成的策略（JPA定义的），这是一个GenerationType。默认是GenerationType. AUTO
                GenerationType.AUTO 主键由程序控制
                GenerationType.TABLE 使用一个特定的数据库表格来保存主键
                GenerationType.IDENTITY 主键由数据库自动生成（主要是自动增长类型）
                GenerationType.SEQUENCE 根据底层数据库的序列来生成主键，条件是数据库支持序列。（这个值要与generator一起使用）
                generator 指定生成主键使用的生成器（可能是orcale中的序列）。
            @SequenceGenerator —— 注解声明了一个数据库序列。该注解有如下属性
                name 表示该表主键生成策略名称，它被引用在@GeneratedValue中设置的“gernerator”值中
                sequenceName 表示生成策略用到的数据库序列名称。
                initialValue 表示主键初始值，默认为0.
                allocationSize 每次主键值增加的大小，例如设置成1，则表示每次创建新记录后自动加1，默认为50.

        关系相关注解
            @ManyToOne 设置多对一关联
                方法一
                    @ManyToOne(cascade={CasCadeType.PERSIST,CascadeType.MERGE})
                    @JoinColumn(name="外键")
                    public 主表类 get主表类(){return 主表对象}
                方法二
                    @ManyToOne(cascade={CascadeType.PERSIST,CascadeType.MERGE})
                    @JoinTable(name="关联表名"，
                        joinColumns = @JoinColumn(name="主表外键"),
                        inverseJoinColumns = @JoinColumns(name="从表外键")
                    )
            @OneToMany 设置一对多关联。
                方法一 。
                    “一端”配置
                    @OneToMany(mappedBy="“多端”的属性")
                    public List<“多端”类> get“多端”列表(){return “多端”列表}
                    “多端”配置参考@ManyToOne.
                方法二
                    “一端”配置
                    @OneToMany(mappedBy="“多端”的属性")
                    @MapKey(name="“多端”做为Key的属性")
                    public Map<“多端”做为Key的属性的类,主表类> get“多端”列表（）{return “多端”列表}
                    “多端”配置参考@ManyToOne.
                方法三 使用这种配置，在为“一端”添加“多端”时，可以修改“多端”的外键。
                    “一端”配置
                    @OneToMany
                    @JoinColumn(name="“多端”外键")
                    public List<“多端”类> get“多端”列表(){return “多端”列表}
                    “多端”配置参考@ManyToOne.
    注解和 XML 的取舍
        那么到底该用注解，还是xml文件配置方式呢？ 他们各自有各自的优缺点：

        XML配置方式：
            优：容易编辑，配置比较集中，方便修改，在大业务量的系统里面，通过xml配置会方便后人理解整个系统的架构，修改之后直接重启应用即可
            缺：比较繁琐，配置形态丑陋, 配置文件过多的时候难以管理
        注解方式：
            优：方便，简洁，配置信息和 Java 代码放在一起，有助于增强程序的内聚性。
            缺：分散到各个class文件中，所以不宜维护, 修改之后你需要重新打包，发布，重启应用。

        个人体会： 小项目，参与人数不多，不复杂的用注解，开发快速。 复杂项目，多人交互，配置量大，维护复杂度高的，用配置文件。

【参考1】
    查看列：desc 表名;
    修改表名：alter table t_book rename to bbb;
    添加列：alter table 表名 add column 列名 varchar(30);
    删除列：alter table 表名 drop column 列名;
    修改列名MySQL： alter table bbb change nnnnn hh int;
    修改列名Oracle：lter table bbb rename column nnnnn to hh int;
    修改列属性：alter table t_book modify name varchar(22);
    http://blog.csdn.net/ws84643557/article/details/6939846

【参考2】
    其实这个hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构。如果不是此方面的需求建议set value="none"。
    create：
    每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
    create-drop ：
    每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
    update：
    最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，
    即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
    validate ：
    每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
    http://www.cnblogs.com/feilong3540717/archive/2011/12/19/2293038.html

【参考3】